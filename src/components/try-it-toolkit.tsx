"use client";

import { useState } from "react";
import {
  Copy,
  History,
  Loader,
  Send,
  Trash2,
  Check,
  ChevronRight,
  Leaf,
  Brain,
  Zap
} from "lucide-react";
import { useInteractions } from "@/hooks/use-interactions";
import type { Interaction } from "@/lib/types";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
  SheetFooter,
  SheetClose,
} from "@/components/ui/sheet";
import { Skeleton } from "@/components/ui/skeleton";
import { formatDistanceToNow } from "date-fns";
import { 
  TooltipProvider, 
  Tooltip, 
  TooltipTrigger, 
  TooltipContent 
} from "@/components/ui/tooltip";

const PRESET_PROMPTS = [
  "Explain quantum computing",
  "Write a short robot story",
  "Summarize Moby Dick",
  "Suggest coffee brand names"
];

export function TryItToolkit() {
  const { state: interactionsState, dispatch } = useInteractions();
  const [prompt, setPrompt] = useState("");
  const [output, setOutput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isCopied, setIsCopied] = useState(false);
  const [isHistorySheetOpen, setIsHistorySheetOpen] = useState(false);
  const [debugInfo, setDebugInfo] = useState("");

  const handlePresetClick = (preset) => {
    setPrompt(preset);
  };

  const handleClear = () => {
    setPrompt("");
    setOutput("");
    setDebugInfo("");
  };

  const handleCopy = () => {
    if (output) {
      navigator.clipboard.writeText(output);
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), 2000);
    }
  };

  const handleSubmit = async (e, currentPrompt, preset) => {
    e.preventDefault();
    if (!currentPrompt.trim() || isLoading) return;

    setIsLoading(true);
    setOutput("");
    setDebugInfo("");

    try {
      console.log('Sending request to /api/generate with prompt:', currentPrompt);
      // Call the API route for AI response
      const response = await fetch('/api/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ prompt: currentPrompt }),
      });

      console.log('Received response from /api/generate:', response);
      const data = await response.json();
      console.log('Response data:', data);

      if (!response.ok) {
        throw new Error(data.error || 'Failed to generate response');
      }

      // Format the output to be more readable
      let formattedOutput = data.result;
      
      // Remove the instruction format if present
      if (formattedOutput.startsWith('[/INST]')) {
        formattedOutput = formattedOutput.substring(7).trim();
      }
      
      // Remove excessive markdown formatting
      formattedOutput = formattedOutput
        .replace(/\*\*/g, '') // Remove bold markers
        .replace(/\* \*\*/g, '- ') // Convert bullet points with bold to regular bullets
        .replace(/\*\*/g, '') // Remove any remaining bold markers
        .replace(/â€¢/g, '-') // Convert bullet characters
        .replace(/\n{3,}/g, '\n\n') // Reduce excessive line breaks
        .trim();
      
      // If the output is too long, truncate it for better readability
      if (formattedOutput.length > 2000) {
        formattedOutput = formattedOutput.substring(0, 2000) + '...\n\n[Response truncated for readability. Ask for more details if needed.]';
      }

      setOutput(formattedOutput);
      dispatch({
        type: "ADD_INTERACTION",
        payload: { input: currentPrompt, output: formattedOutput, preset },
      });
      
      // Add debug info
      setDebugInfo(`Response generated by ${formattedOutput.includes('simulated response') || formattedOutput.includes('open-source model with limited') ? 'local simulation' : 'AI model'}`);
    } catch (error) {
      console.error("Error generating AI response:", error);
      const errorMessage = `Error: ${error.message || "Failed to generate response"}`;
      setOutput(errorMessage);
      setDebugInfo(`Error occurred: ${error.message}`);
      dispatch({
        type: "ADD_INTERACTION",
        payload: { input: currentPrompt, output: errorMessage, preset },
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  const restoreInteraction = (interaction) => {
    setPrompt(interaction.input);
    setOutput(interaction.output);
    setIsHistorySheetOpen(false);
  };

  return (
    <div>
      <Card className="w-full shadow-xl border-0 bg-white/90 backdrop-blur-sm rounded-3xl overflow-hidden">
        <CardHeader className="flex-row items-start justify-between bg-gradient-to-r from-emerald-500 to-teal-500 text-white rounded-t-3xl pb-4">
          <div className="flex items-center gap-3">
            <div className="bg-white/20 p-2 rounded-lg">
              <Leaf className="h-5 w-5" />
            </div>
            <div>
              <CardTitle className="font-headline text-xl">EcoMind Assistant</CardTitle>
              <CardDescription className="text-emerald-100">Sustainable AI solutions</CardDescription>
            </div>
          </div>
          <div className="flex items-center gap-1">
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button variant="ghost" size="icon" onClick={handleCopy} disabled={!output} className="text-white hover:bg-white/20">
                    {isCopied ? <Check className="size-4 text-green-300" /> : <Copy className="size-4" />}
                    <span className="sr-only">Copy Output</span>
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>Copy output</p>
                </TooltipContent>
              </Tooltip>

              <Tooltip>
                <TooltipTrigger asChild>
                  <Button variant="ghost" size="icon" onClick={handleClear} disabled={!prompt && !output} className="text-white hover:bg-white/20">
                    <Trash2 className="size-4" />
                    <span className="sr-only">Clear</span>
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>Clear input & output</p>
                </TooltipContent>
              </Tooltip>
              
              <Sheet open={isHistorySheetOpen} onOpenChange={setIsHistorySheetOpen}>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <SheetTrigger asChild>
                      <Button variant="ghost" size="icon" className="text-white hover:bg-white/20">
                        <History className="size-4" />
                        <span className="sr-only">View History</span>
                      </Button>
                    </SheetTrigger>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>View history</p>
                  </TooltipContent>
                </Tooltip>
                <SheetContent className="flex flex-col">
                  <SheetHeader>
                    <SheetTitle>Interaction History</SheetTitle>
                  </SheetHeader>
                  <div className="flex-grow overflow-y-auto">
                    <div className="space-y-4 pr-6">
                      {interactionsState.history.length > 0 ? (
                        interactionsState.history.map((interaction) => (
                          <button key={interaction.id} onClick={() => restoreInteraction(interaction)} className="block w-full text-left">
                            <Card className="hover:bg-secondary transition-colors border-primary/20">
                              <CardContent className="p-4">
                                <p className="text-sm font-medium truncate">{interaction.input}</p>
                                <p className="text-xs text-muted-foreground mt-1">
                                  {formatDistanceToNow(new Date(interaction.timestamp), { addSuffix: true })}
                                </p>
                              </CardContent>
                            </Card>
                          </button>
                        ))
                      ) : (
                        <p className="text-sm text-muted-foreground text-center py-8">No history yet.</p>
                      )}
                    </div>
                  </div>
                  <SheetFooter>
                    <SheetClose asChild>
                      <Button variant="outline">Close</Button>
                    </SheetClose>
                  </SheetFooter>
                </SheetContent>
              </Sheet>
            </TooltipProvider>
          </div>
        </CardHeader>
        <CardContent className="space-y-6 pt-6">
          <div className="min-h-[200px] rounded-xl border bg-white/50 p-4 shadow-inner">
            {isLoading ? (
              <div className="space-y-3">
                <div className="flex items-center gap-2">
                  <Loader className="size-4 animate-spin text-emerald-500" />
                  <span className="text-sm text-muted-foreground">Generating response with EcoMind AI...</span>
                </div>
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-4 w-3/4" />
              </div>
            ) : output ? (
              <div>
                <p className="text-sm whitespace-pre-wrap text-gray-800">{output}</p>
                <div className="mt-4 text-xs text-muted-foreground">
                  {debugInfo}
                </div>
              </div>
            ) : (
              <div className="flex items-center justify-center h-full">
                <div className="text-center">
                  <Leaf className="h-8 w-8 text-emerald-400 mx-auto mb-2" />
                  <p className="text-sm text-muted-foreground">Enter a prompt to start a conversation with EcoMind AI</p>
                </div>
              </div>
            )}
          </div>
          
          <div className="space-y-3">
            <div className="flex items-center gap-2">
              <Brain className="h-4 w-4 text-emerald-500" />
              <p className="text-xs font-medium text-muted-foreground">Try these examples...</p>
            </div>
            <div className="flex flex-wrap gap-2">
              {PRESET_PROMPTS.map((p, index) => (
                <Button 
                  key={p} 
                  variant="outline" 
                  size="sm" 
                  onClick={() => handlePresetClick(p)} 
                  className={`text-xs sm:text-sm transition-colors rounded-full px-3 ` +
                    (index % 4 === 0 ? 'bg-emerald-100 hover:bg-emerald-600 border-emerald-200 text-emerald-800 hover:text-white' : '') +
                    (index % 4 === 1 ? 'bg-teal-100 hover:bg-teal-600 border-teal-200 text-teal-800 hover:text-white' : '') +
                    (index % 4 === 2 ? 'bg-cyan-100 hover:bg-cyan-600 border-cyan-200 text-cyan-800 hover:text-white' : '') +
                    (index % 4 === 3 ? 'bg-green-100 hover:bg-green-600 border-green-200 text-green-800 hover:text-white' : '')}
                >
                  {p}
                  <ChevronRight className="size-3 ml-1" />
                </Button>
              ))}
            </div>
          </div>

          <form onSubmit={(e) => {
            e.preventDefault();
            handleSubmit(e, prompt);
            setPrompt(""); // Clear the input after submission
          }} className="relative">
            <Textarea
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              placeholder="Ask EcoMind AI anything..."
              className="pr-12 min-h-[100px] border-emerald-200 focus-visible:ring-emerald-500 rounded-xl resize-none"
            />
            <Button 
              type="submit" 
              size="icon" 
              className="absolute bottom-2.5 right-2.5 bg-gradient-to-r from-emerald-500 to-teal-500 hover:from-emerald-600 hover:to-teal-600 rounded-full shadow-lg"
              disabled={isLoading || !prompt.trim()}
            >
              {isLoading ? <Loader className="size-4 animate-spin" /> : <Send className="size-4" />}
              <span className="sr-only">Submit</span>
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}